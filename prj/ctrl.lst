C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\ctrl.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\code\ctrl.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\ctrl.lst) OBJECT(.\c
                    -trl.obj)

line level    source

   1          #include "include.h"
   2          
   3          const INT8U DefaultKeyABuf[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   4          
   5          INT8U CardRevBuf[16] = { 0 };
   6          INT8U const CardKeyABlockBuf[16] = {
   7                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   8                                                                          0xff,0x07,0x80,0x69,
   9                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     
  10                                                                          };
  11          
  12          INT8U CtrlMode = CTRL_BOARD_MODE;
  13          INT8U OptMode  = OPT_INC_MODE;
  14          INT8U bPass = 1; bWarn = 0;
  15          INT8U LedOnType = LED_LONG;
  16          
  17          int CARDREDUCE = 2;
  18          int CARDADD = 100;
  19          void pass( void )
  20          {
  21   1              LED_ON;
  22   1              BEEP_ON;
  23   1              delay_ms(2000);
  24   1              BEEP_OFF;
  25   1              LED_OFF;
  26   1      }
  27          
  28          void warn(void)
  29          {
  30   1              INT8U i;
  31   1              
  32   1              LED_OFF;
  33   1              for( i = 0; i < 3; i++ )
  34   1              {
  35   2                      LED_ON;
  36   2                      BEEP_ON;
  37   2                      delay_ms(200);
  38   2                      BEEP_OFF;
  39   2                      LED_OFF;
  40   2                      delay_ms(200);
  41   2              }
  42   1      }
  43          
  44          void cal_keyA( INT8U *DestBuf )
  45          {
  46   1              const INT8U KeyABuf[] = { 0x20, 0x12, 0x10, 0x01, 0x00, 0x00 };
  47   1      
  48   1              memcpy( DestBuf, KeyABuf, 6 );
  49   1      }
  50          
  51          void send_rebck( psUartData psUartDataRevSend )
  52          {
  53   1              INT8U * pTmp;
  54   1              INT8U Len,Check;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 2   

  55   1              INT8U i;
  56   1      
  57   1              Len = psUartDataRevSend->UartCmdLen     + psUartDataRevSend->UartDataLen + 2;
  58   1              pTmp = ( INT8U * )psUartDataRevSend;
  59   1      
  60   1              send_byte( 0xFC );
  61   1              Check = 0xFC;
  62   1              for( i = 0; i < Len; i++ )
  63   1              {
  64   2                      send_byte( *pTmp );
  65   2                      Check ^= *pTmp++;
  66   2              }
  67   1              send_byte( Check );     
  68   1      }
  69          
  70          void uart_over( void )
  71          {
  72   1              UartCount = 0;
  73   1              UartStart = FALSE;
  74   1              UartComp = FALSE;
  75   1      }
  76          
  77          INT8U check_com( psUartData psUartDataRevSend )
  78          {
  79   1              psUartDataRevSend->UartDataBuf[0] = 0xAA;
  80   1      
  81   1              return TRUE;
  82   1      }
  83          
  84          INT8U req_card_sn( psUartData psUartDataRevSend )
  85          {
  86   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
  87   1              {
  88   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
  89   2                      {
  90   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
  91   3                              memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
  92   3                              bWarn = 1;
  93   3                              return FALSE;
  94   3                      }       
  95   2              }
  96   1              
  97   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
  98   1              {
  99   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 100   2                      memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
 101   2                      bWarn = 1;
 102   2                      return FALSE;   
 103   2              }
 104   1      
 105   1              memcpy( psUartDataRevSend->UartDataBuf, &CardRevBuf[2], 4 );
 106   1      
 107   1              bPass = 1;
 108   1      
 109   1              return TRUE;
 110   1      }
 111          
 112          INT8U updata_key( psUartData psUartDataRevSend )
 113          {
 114   1              INT8U CardKeyABuf[6];
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 3   

 115   1              INT8U KeyBlockAddr;
 116   1      
 117   1              psUartDataRevSend->UartDataLen = 7;
 118   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 119   1      
 120   1              if( KeyBlockAddr % 4 != 3 )
 121   1              {
 122   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 123   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 124   2                      bWarn = 1;
 125   2                      return FALSE;   
 126   2              }
 127   1      
 128   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 129   1              {
 130   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 131   2                      {
 132   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 133   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 134   3                              bWarn = 1;
 135   3                              return FALSE;
 136   3                      }       
 137   2              }
 138   1      
 139   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 140   1              {
 141   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 142   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 143   2                      bWarn = 1;
 144   2                      return FALSE;   
 145   2              }
 146   1      
 147   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 148   1              {
 149   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 150   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 151   2                      bWarn = 1;
 152   2                      return FALSE;
 153   2              }
 154   1      
 155   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 156   1      
 157   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 158   1              {
 159   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 160   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 161   2                      bWarn = 1;
 162   2                      return FALSE;   
 163   2              }
 164   1      
 165   1              memcpy( CardKeyABlockBuf, &psUartDataRevSend->UartDataBuf[7], 6 );
 166   1      
 167   1              if( PcdWrite( KeyBlockAddr, CardKeyABlockBuf ) != MI_OK )// Ð´¿¨
 168   1              {
 169   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
 170   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 171   2                      bWarn = 1;
 172   2                      return FALSE;
 173   2              }
 174   1      
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 4   

 175   1              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 176   1              bPass = 1;
 177   1              return TRUE;
 178   1      }
 179          
 180          INT8U block_write( psUartData psUartDataRevSend )
 181          {
 182   1              INT8U CardWriteBuf[16];
 183   1              INT8U CardKeyABuf[6];
 184   1              INT8U KeyBlockAddr;
 185   1      
 186   1              psUartDataRevSend->UartDataLen = 0x11;
 187   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 188   1      
 189   1              if( KeyBlockAddr % 4 == 3 )
 190   1              {
 191   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 192   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 193   2                      bWarn = 1;
 194   2                      return FALSE;   
 195   2              }
 196   1      
 197   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 198   1              {
 199   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 200   2                      {
 201   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 202   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 203   3                              bWarn = 1;
 204   3                              return FALSE;
 205   3                      }       
 206   2              }
 207   1      
 208   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 209   1              {
 210   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 211   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 212   2                      bWarn = 1;
 213   2                      return FALSE;   
 214   2              }
 215   1      
 216   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 217   1              {
 218   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 219   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 220   2                      bWarn = 1;
 221   2                      return FALSE;
 222   2              }
 223   1      
 224   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 225   1      
 226   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 227   1              {
 228   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 229   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 230   2                      bWarn = 1;
 231   2                      return FALSE;   
 232   2              }
 233   1      
 234   1              memcpy( CardWriteBuf, &psUartDataRevSend->UartDataBuf[7], 16 );
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 5   

 235   1              if( PcdWrite( KeyBlockAddr, CardWriteBuf ) != MI_OK )//Ð´¿¨
 236   1              {
 237   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
 238   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 239   2                      bWarn = 1;
 240   2                      return FALSE;
 241   2              }
 242   1              bPass = 1;
 243   1              
 244   1              return TRUE;
 245   1      }
 246          
 247          INT8U block_read( psUartData psUartDataRevSend )
 248          {
 249   1              INT8U CardReadBuf[16];
 250   1              INT8U CardKeyABuf[6];
 251   1              INT8U KeyBlockAddr;
 252   1      
 253   1              psUartDataRevSend->UartDataLen = 0x11;
 254   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 255   1      
 256   1              if( KeyBlockAddr % 4 == 3 )
 257   1              {
 258   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 259   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 260   2                      bWarn = 1;
 261   2                      return FALSE;   
 262   2              }
 263   1      
 264   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 265   1              {
 266   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 267   2                      {
 268   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 269   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 270   3                              bWarn = 1;
 271   3                              return FALSE;
 272   3                      }       
 273   2              }
 274   1      
 275   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 276   1              {
 277   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 278   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 279   2                      bWarn = 1;
 280   2                      return FALSE;   
 281   2              }
 282   1      
 283   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 284   1              {
 285   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 286   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 287   2                      bWarn = 1;
 288   2                      return FALSE;
 289   2              }
 290   1      
 291   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 292   1      
 293   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 294   1              {
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 6   

 295   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 296   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 297   2                      bWarn = 1;
 298   2                      return FALSE;   
 299   2              }
 300   1      
 301   1              if( PcdRead( KeyBlockAddr, CardReadBuf ) != MI_OK )// ¶Á¿¨
 302   1              {
 303   2                      psUartDataRevSend->UartErrCode = ERROR_READ_IC;
 304   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 305   2                      bWarn = 1;
 306   2                      return FALSE;
 307   2              }
 308   1              memcpy( &psUartDataRevSend->UartDataBuf[1], CardReadBuf, 16 );
 309   1              bPass = 1;
 310   1                              
 311   1              return TRUE;
 312   1      }
 313          
 314          void display_error( void )
 315          {
 316   1              lcdMsg("³ÌÐò³ö´í", 1, 3 );
 317   1              lcdMsg("----", 4, 3);
 318   1      }
 319          
 320          void display_no_id( void )
 321          {
 322   1          char DisplayBuf[10];
 323   1          memset(DisplayBuf,0,10);
 324   1      
 325   1              switch( OptMode )
 326   1              {
 327   2                      case OPT_INC_MODE:
 328   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 329   2                              lcdMsg("Ïû·Ñ£º",3,0);
 330   2                              sprintf(DisplayBuf,"%d",CARDREDUCE);
 331   2                              lcdMsg(DisplayBuf , 3, 3 );
 332   2                              break;
 333   2      
 334   2                      case OPT_ADD_MODE:
 335   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 336   2                              lcdMsg("³äÖµ£º",3,0);
 337   2                              sprintf(DisplayBuf,"%d",CARDADD);
 338   2                              lcdMsg(DisplayBuf , 3, 3 );
 339   2                              break;
 340   2      
 341   2                      case OPT_READ_MODE:
 342   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 343   2                              lcdMsg("¶Á¿¨£º----",3,0);
 344   2                              break;
 345   2      
 346   2                      case OPT_REG_MODE:
 347   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 348   2                              lcdMsg("¿ª¿¨£º----",3,0);
 349   2                              break;
 350   2      
 351   2                      default:
 352   2                              break;
 353   2              }
 354   1      }
 355          
 356          void display_money( INT32U CardMoney )
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 7   

 357          {
 358   1              char DisplayBuf[10];
 359   1              char *pDisplayChar;
 360   1              INT32U Tmp;
 361   1      
 362   1              pDisplayChar = DisplayBuf;
 363   1      
 364   1              if( CardMoney > 9999 )  //×î´óÏÔÊ¾9999
 365   1              {
 366   2                      CardMoney = 9999;
 367   2              }
 368   1      
 369   1              Tmp = CardMoney;
 370   1      
 371   1              *pDisplayChar++ = Tmp / 1000 + '0';
 372   1              Tmp %= 1000;
 373   1              *pDisplayChar++ = Tmp / 100 + '0';
 374   1              Tmp %= 100;
 375   1              *pDisplayChar++ = Tmp / 10 + '0';
 376   1              Tmp %= 10;
 377   1              *pDisplayChar++ = Tmp + '0';
 378   1              *pDisplayChar++ = '\0';
 379   1      
 380   1              lcdMsg(DisplayBuf, 4, 3 );
 381   1      }
 382          
 383          void display_id( INT8U * SrcBuf )
 384          {
 385   1              char DisplayBuf[10];
 386   1              char *pDisplayChar;
 387   1              INT8U Tmp, i;
 388   1      
 389   1              pDisplayChar = DisplayBuf;
 390   1      
 391   1              for( i = 0; i < 4; i++ )
 392   1              {
 393   2                      Tmp = ( ( *SrcBuf ) >> 4 ) & 0x0F;      
 394   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 395   2                      {
 396   3                              *pDisplayChar ++ = '0' + Tmp;   
 397   3                      }
 398   2                      else
 399   2                      {
 400   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 401   3                      }
 402   2      
 403   2                      Tmp = ( *SrcBuf ) & 0x0F;       
 404   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 405   2                      {
 406   3                              *pDisplayChar ++ = '0' + Tmp;   
 407   3                      }
 408   2                      else
 409   2                      {
 410   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 411   3                      }
 412   2      
 413   2                      SrcBuf ++;
 414   2              }
 415   1              *pDisplayChar ++ = '\0';
 416   1      
 417   1              lcdMsg(DisplayBuf, 2, 3 );
 418   1      }
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 8   

 419          
 420          INT8U ctrl_by_pc( psUartData psUartDataRevSend )
 421          {
 422   1              psUartDataRevSend = psUartDataRevSend;
 423   1      
 424   1              CtrlMode = CTRL_PC_MODE;
 425   1              
 426   1              lcdMsg("µçÄÔ¿ØÖÆ", 1, 3 );
 427   1              lcdMsg("----", 4, 3);
 428   1              lcdMsg("----", 3, 3);
 429   1              return TRUE;    
 430   1      }
 431          
 432          INT8U ctrl_by_board( psUartData psUartDataRevSend )
 433          {
 434   1              psUartDataRevSend = psUartDataRevSend;
 435   1              
 436   1              CtrlMode = CTRL_BOARD_MODE;
 437   1      
 438   1              display_no_id();
 439   1              
 440   1              return TRUE;    
 441   1      }
 442          
 443          void pc_process( void )
 444          {
 445   1              psUartData psUartDataRevSend;
 446   1              INT8U i;
 447   1              INT8U Check = 0xFE;
 448   1              INT8U Len;
 449   1      
 450   1              if( UartComp != TRUE )
 451   1              {
 452   2                      return;
 453   2              }
 454   1      
 455   1              psUartDataRevSend = (psUartData)UartBuf;
 456   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 457   1      
 458   1              for( i = 0; i < ( Len - 1 ); i ++ )
 459   1              {
 460   2                      Check ^= UartBuf[i];
 461   2              }
 462   1              /*
 463   1              if( Check != UartBuf[Len - 1] )
 464   1              {
 465   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 466   1                      send_rebck( psUartDataRevSend );
 467   1                      uart_over();
 468   1                      return;
 469   1              }
 470   1              */
 471   1              
 472   1              switch( psUartDataRevSend->UartCmd )
 473   1              {       
 474   2                      case 0x0002:  //¼ì²â´®¿Ú×´Ì¬ -> fe 03 01 c1 c0 er 00 ck,  <- fc 03 01 c1 c0 er aa ck
 475   2                              check_com( psUartDataRevSend );
 476   2                              break;
 477   2                      case 0x0003: //²éÑ¯¿¨ºÅ  ->     fe 03 04 c1 c0 er 00 00 00 00 ck, <- fc 03 04 c1 c0 er sn3 sn2 sn1 sn0 ck
 478   2                              req_card_sn( psUartDataRevSend );
 479   2                              break;
 480   2      
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 9   

 481   2                      case 0x0110: //ÐÞ¸ÄÃÜÂë·½Ê½0 fe 03 0d c1 c0 er kn o5 o4.. o0 n5 n4.. n0 ck, <-fe 03 07 c1 c0 er kn n5 n4
             -.. n0 ck        
 482   2                              updata_key( psUartDataRevSend ); //ÐÞ¸ÄÃÜÂë kn%4 == 3   
 483   2                              break;
 484   2      
 485   2                      case 0x0120: //¶ÁÊý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 486   2                              block_read( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3   
 487   2                              break;
 488   2      
 489   2                      case 0x0130: //Ð´Êý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 490   2                              block_write( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3  
 491   2                              break;
 492   2      
 493   2                      case 0x0140: //°å×Ó¿ØÖÆ
 494   2                              ctrl_by_board( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3        
 495   2                              break;  
 496   2                              
 497   2                      default:
 498   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 499   2                              break;
 500   2              }
 501   1              send_rebck( psUartDataRevSend );
 502   1              uart_over();
 503   1      }
 504          
 505          INT8U board_uart_event( void )
 506          {
 507   1              psUartData psUartDataRevSend;
 508   1              INT8U i;
 509   1              INT8U Check = 0xFE;
 510   1              INT8U Len;
 511   1              INT8U Result = FALSE;
 512   1      
 513   1              if( UartComp != TRUE )
 514   1              {
 515   2                      return Result;
 516   2              }
 517   1      
 518   1              psUartDataRevSend = (psUartData)UartBuf;
 519   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 520   1      
 521   1              for( i = 0; i < ( Len - 1 ); i ++ )
 522   1              {
 523   2                      Check ^= UartBuf[i];
 524   2              }
 525   1              /*
 526   1              if( Check != UartBuf[Len - 1] )
 527   1              {
 528   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 529   1                      send_rebck( psUartDataRevSend );
 530   1                      uart_over();
 531   1                      return;
 532   1              }
 533   1              */
 534   1              
 535   1              switch( psUartDataRevSend->UartCmd )
 536   1              {       
 537   2                      case 0x0141:  //¼ÆËã»ú¿ØÖÆ
 538   2                              ctrl_by_pc( psUartDataRevSend );
 539   2                              Result = TRUE;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 10  

 540   2                              break;
 541   2                              
 542   2                      default:
 543   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 544   2                              break;
 545   2              }
 546   1              send_rebck( psUartDataRevSend );
 547   1              uart_over();
 548   1      
 549   1              return Result;
 550   1      }
 551          
 552          void board_process( void )
 553          {
 554   1              INT8U CardReadBuf[16];
 555   1              INT8U CardWriteBuf[16];
 556   1              INT8U CardKeyABuf[6];
 557   1              INT32U CardMoney;
 558   1              INT8U KeyVal;
 559   1      
 560   1              if( board_uart_event() == TRUE )   //¼ÆËã»ú¿ØÖÆ
 561   1              {
 562   2                      return;
 563   2              }
 564   1      
 565   1              KeyVal = get_key();
 566   1              switch( KeyVal )
 567   1              {
 568   2                      case KEY_1:
 569   2                              OptMode = OPT_INC_MODE;
 570   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 571   2                              break;
 572   2      
 573   2                      case KEY_2:
 574   2                              OptMode = OPT_ADD_MODE;
 575   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 576   2                              break;
 577   2      
 578   2                      case KEY_3:
 579   2                              OptMode = OPT_READ_MODE;
 580   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 581   2                              break;
 582   2      
 583   2                      case KEY_4:
 584   2                              OptMode = OPT_REG_MODE;
 585   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 586   2                              break;
 587   2      
 588   2                      default:
 589   2                              break;
 590   2              }
 591   1              
 592   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 593   1              {
 594   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 595   2                      {
 596   3                              display_no_id();
 597   3                              return;
 598   3                      }       
 599   2              }
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 11  

 600   1      
 601   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 602   1              {
 603   2                      display_no_id();
 604   2                      return; 
 605   2              }
 606   1      
 607   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 608   1              {
 609   2                      display_no_id();
 610   2                      return;
 611   2              }
 612   1              display_id( &CardRevBuf[2] );
 613   1      
 614   1              cal_keyA( CardKeyABuf );                //¼ÆËãÃÜÂë
 615   1      
 616   1              switch( OptMode )
 617   1              {
 618   2                      case OPT_REG_MODE:                      //ÐÂ¿¨×¢²á
 619   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, DefaultKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 620   2                              {
 621   3                                      display_error();        
 622   3                                      return; 
 623   3                              }
 624   2                              memset( CardWriteBuf, 0, 16 );
 625   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´¿¨
 626   2                              {
 627   3                                      display_error();
 628   3                                      return; 
 629   3                              }
 630   2                              memcpy( CardWriteBuf, CardKeyABlockBuf, 16 );
 631   2                              memcpy( CardWriteBuf, CardKeyABuf, 6 );
 632   2                              if( PcdWrite( 7, CardWriteBuf ) != MI_OK )// ÐÞ¸ÄÃÜÂë
 633   2                              {
 634   3                                      display_error();
 635   3                                      return; 
 636   3                              }
 637   2                              lcdMsg("×¢²á³É¹¦", 1, 3);
 638   2                              bPass = 1;
 639   2                              break;
 640   2                                      
 641   2                      case OPT_ADD_MODE:              //³äÖµ·½Ê½
 642   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 643   2                              {
 644   3                                      display_error();
 645   3                                      return; 
 646   3                              }
 647   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 648   2                              {
 649   3                                      display_error();
 650   3                                      return; 
 651   3                              }
 652   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 653   2                              CardMoney += CARDADD;                   //³äÖµÔö¼Ó100
 654   2                              memset( CardWriteBuf, 0, 16 );
 655   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 656   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
 657   2                              {
 658   3                                      display_error();
 659   3                                      return; 
 660   3                              }
 661   2                              display_money( CardMoney );
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 12  

 662   2                              bPass = 1;
 663   2                              break;
 664   2                              
 665   2                      case OPT_INC_MODE:              //Ïû·Ñ·½Ê½
 666   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 667   2                              {
 668   3                                      display_error();
 669   3                                      return; 
 670   3                              }
 671   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 672   2                              {
 673   3                                      display_error();
 674   3                                      return; 
 675   3                              }
 676   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 677   2                              if( CardMoney < 8 )
 678   2                              {
 679   3                                      display_error();
 680   3                                      bWarn = 1;
 681   3                                      return;
 682   3                              }
 683   2                              CardMoney -= CARDREDUCE;        //Ïû·Ñ -8
 684   2                              memset( CardWriteBuf, 0, 16 );
 685   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 686   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
 687   2                              {
 688   3                                      display_error();
 689   3                                      return; 
 690   3                              }
 691   2                              display_money( CardMoney );
 692   2                              bPass = 1;
 693   2                              break;  
 694   2                              
 695   2                      case OPT_READ_MODE:             //¶Á¿¨·½Ê½
 696   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 697   2                              {
 698   3                                      display_error();
 699   3                                      return; 
 700   3                              }
 701   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 702   2                              {
 703   3                                      display_error();
 704   3                                      return; 
 705   3                              }
 706   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 707   2                              display_money( CardMoney );
 708   2                              bPass = 1;
 709   2                              break;                                                                                                 
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                 
 710   2                              
 711   2                      default:
 712   2                              break;
 713   2              }
 714   1              PcdHalt();      
 715   1      }
 716          
 717          void ctrl_process( void )
 718          {
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:29:16 PAGE 13  

 719   1              if( CtrlMode == CTRL_PC_MODE )
 720   1              {
 721   2                      pc_process();
 722   2              }
 723   1              else if( CtrlMode == CTRL_BOARD_MODE )
 724   1              {
 725   2                      board_process();
 726   2              }
 727   1      
 728   1              if( bPass )
 729   1              {
 730   2                      bPass = 0;
 731   2                      pass(); 
 732   2      
 733   2              }
 734   1              if( bWarn )
 735   1              {
 736   2                      bWarn = 0;
 737   2                      warn();
 738   2              }
 739   1      }
 740          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3707    ----
   CONSTANT SIZE    =    113    ----
   XDATA SIZE       =     48     177
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
